#!/usr/bin/env bash

PWD="$( cd $(dirname $0)/.. && pwd)"

kind delete cluster --name platform

config_abs_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/config/ssl"
sed "s@TOBEREPLACED@${config_abs_path}@" ${PWD}/scripts/config/kind-platform-config.yaml > ${PWD}/scripts/config/kind-platform-config.yaml-local

kind create cluster --name platform --config ${PWD}/scripts/config/kind-platform-config.yaml-local

images=(
    minio/minio:RELEASE.2022-06-30T20-58-09Z
    gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
    $(curl https://raw.githubusercontent.com/syntasso/kratix/main/distribution/single-cluster/install-all-in-one.yaml | grep "image: syntasso/kratix-platform:" | awk '{print $2}')
)

for image in "${images[@]}"; do
    docker pull $image
    kind load docker-image --name platform $image
done

kubectl apply --filename https://raw.githubusercontent.com/syntasso/kratix/main/distribution/single-cluster/install-all-in-one.yaml
kubectl apply --filename https://raw.githubusercontent.com/syntasso/kratix/main/distribution/single-cluster/config-all-in-one.yaml

kubectl create ns dex
kubectl -n dex create secret tls dex.example.com.tls \
    --cert=${config_abs_path}/cert.pem \
    --key=${config_abs_path}/key.pem

while ! kubectl get namespace kratix-worker-system --context kind-platform >/dev/null 2>&1; do
    echo -n "."
    sleep 2
done

echo "Kratix is installed"
