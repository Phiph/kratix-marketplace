#!/usr/bin/env bash

set -ex

docker build --tag syntasso/pre-test-image:dev ./support --file ./support/Dockerfile.pre
kind load docker-image syntasso/pre-test-image:dev --name platform

docker build --tag syntasso/post-test-image:dev ./support --file ./support/Dockerfile.post
kind load docker-image syntasso/post-test-image:dev --name platform

../../scripts/image vault build load

export VAULT_ADDR="http://127.0.0.1:8200"
vault auth enable kubernetes 2>/dev/null || true

kubectl delete serviceaccount vault-auth-delegator || true
kubectl create serviceaccount vault-auth-delegator

kubectl delete clusterrolebinding role-tokenreview-binding || true
kubectl create clusterrolebinding role-tokenreview-binding \
    --clusterrole=system:auth-delegator \
    --serviceaccount=default:vault-auth-delegator

k delete secret vault-auth-token || true
kubectl apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: vault-auth-token
  annotations:
    kubernetes.io/service-account.name: vault-auth-delegator
type: kubernetes.io/service-account-token
EOF

TOKEN=$(kubectl describe secrets/vault-auth-token | tail -1 | yq '.token')
K8S_HOST=$(TERM=dumb kubectl cluster-info | grep "control plane" | awk '{print $7}')
kubectl config view --raw --minify --flatten -o jsonpath='{.clusters[].cluster}' | yq '."certificate-authority-data"' | base64 -d > ca.crt

vault write auth/kubernetes/config \
    token_reviewer_jwt="${TOKEN}" \
    kubernetes_host="${K8S_HOST}" \
    kubernetes_ca_cert=@ca.crt
rm ca.crt

cat > policy.hcl <<EOF
path "secret/*" {
  capabilities = ["create", "read", "update", "patch", "delete", "list"]
}
EOF
vault policy write secret-writer policy.hcl
rm policy.hcl

kubectl delete serviceaccount vault-pipeline-image || true
kubectl create serviceaccount vault-pipeline-image

vault write auth/kubernetes/role/vault-pipeline-image \
    bound_service_account_names=vault-pipeline-image \
    bound_service_account_namespaces=default \
    policies=secret-writer \
    ttl=1h

kubectl delete configmap vault-pipeline-image || true
kubectl create configmap vault-pipeline-image \
    --from-literal=url="http://host.docker.internal:8200" \
    --from-literal=role=vault-pipeline-image \
    --from-literal=authpath=kubernetes

kubectl delete clusterrole vault-pipeline-image || true
kubectl create clusterrole vault-pipeline-image \
    --verb=get \
    --resource=configmaps \
    --resource-name=vault-pipeline-image

kubectl delete clusterrolebinding vault-pipeline-image || true
kubectl create clusterrolebinding vault-pipeline-image \
    --clusterrole=vault-pipeline-image \
    --serviceaccount=default:vault-pipeline-image

kubectl delete -f job.yaml || true
kubectl apply -f job.yaml
