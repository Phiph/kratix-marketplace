version: 2.1

orbs:
  k8s: circleci/kubernetes@1.3.1
  retry: kimh/run-with-retry@1.0.0

executors:
  machine-medium:
    machine: true
    resource_class: medium
    working_directory: ~/repo
  machine-large:
    machine: true
    resource_class: large
    working_directory: ~/repo

commands:
  install_software:
    steps:
      - k8s/install
      - run:
          name: Install tools and deps
          command: |
            if [ ! -f ~/bin/kind ]; then
              curl -L https://github.com/kubernetes-sigs/kind/releases/download/v0.14.0/kind-linux-amd64 -o ~/bin/kind
              chmod +x ~/bin/kind
            fi

            curl -sLo ~/bin/worker-resource-builder.tar.gz https://github.com/syntasso/kratix/releases/download/v0.0.4/worker-resource-builder_0.0.4_linux_amd64.tar.gz
            tar -xvf ~/bin/worker-resource-builder.tar.gz -C ~/bin
            mv ~/bin/worker-resource-builder-v* ~/bin/worker-resource-builder
            chmod +x ~/bin/worker-resource-builder

      - run:
          name: Install Kratix
          command: |
            kind create cluster --name platform
            curl -sL https://raw.githubusercontent.com/syntasso/kratix/main/distribution/single-cluster/install-all-in-one.yaml | sed "s_syntasso/kratix_syntassodev/kratix_g" | kubectl apply -f -
            sleep 5
            kubectl apply --filename https://raw.githubusercontent.com/syntasso/kratix/main/distribution/single-cluster/config-all-in-one.yaml

            git clone https://github.com/syntasso/kratix /tmp/kratix
            pushd /tmp/kratix
            ./scripts/register-worker --name platform-cluster --context kind-platform --state-store minio-store
            popd

            sleep 5
      - attach_workspace:
          at: .

jobs:
  test-and-push:
    parameters:
      promise_dir:
        type: string
    executor:
      name: machine-large
    steps:
      - install_software
      - checkout
      - run:
          working_directory: ~/repo/<< parameters.promise_dir >>
          name: Validate no pending changes
          command: |
            ./internal/scripts/inject-deps

            if ! git diff --exit-code .; then
              echo ""
              echo "Changes in the dependencies were detected"
              echo "Injection of dependencies via CI is not supported. Please commit and push them manually."
              exit 1
            fi
      - run:
          name: Install Promise
          working_directory: ~/repo/<< parameters.promise_dir >>
          command: |
            kubectl create --filename promise.yaml
            if test -f ./internal/scripts/pipeline-image; then
              ./internal/scripts/pipeline-image build load
            fi
      - retry/run-with-retry:
          command: << parameters.promise_dir >>/internal/scripts/test promise
          # 5 minutes total retry (3 sec * 100 times = 300 sec)
          sleep: 3
          retry-count: 100
      - run:
          name: Wait for CRDs
          working_directory: ~/repo/<< parameters.promise_dir >>
          no_output_timeout: 1m
          command: |
            if test -f "resource-request.yaml"; then
              crd=$(yq e 'select(.kind == "Promise") | .spec.api.metadata.name' promise.yaml)

              while ! kubectl get crd ${crd} 2>/dev/null; do
                sleep 1
              done

              kubectl wait crd/${crd} --for condition=established --timeout=60s
            fi
      - run:
          name: Apply resource-request
          working_directory: ~/repo/<< parameters.promise_dir >>
          command: |
            if test -f "resource-request.yaml"; then
              kubectl apply --filename resource-request.yaml
            fi
      - retry/run-with-retry:
          command: << parameters.promise_dir >>/internal/scripts/test resource-request
          # 5 minutes total retry (3 sec * 100 times = 300 sec)
          sleep: 3
          retry-count: 100
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - run:
                name: GHCR Push
                working_directory: ~/repo/<< parameters.promise_dir >>
                command: |
                  if test -f ./internal/scripts/pipeline-image; then
                    echo "$GITHUB_PACKAGES_TOKEN" | docker login ghcr.io -u syntassodev --password-stdin
                    ./internal/scripts/pipeline-image push
                  fi
            - run:
                name: Verify package is public
                working_directory: ~/repo/<< parameters.promise_dir >>
                command: |
                  if test -f "internal/configure-pipeline/Dockerfile"; then
                    image_name=$(yq 'select(document_index == 0) | .spec.workflows.resource.configure[0].spec.containers[0].image' promise.yaml | cut -d "/" -f 3,4 | cut -d ":" -f 1)
                    visibility=$(curl -sL \
                      -H "Accept: application/vnd.github+json"\
                      -H "Authorization: Bearer $GITHUB_PACKAGES_TOKEN" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                      "https://api.github.com/orgs/syntasso/packages?package_type=container" |
                    jq -r ".[] | select(.name | contains (\"${image_name}\")) | .visibility")

                    test "${visibility}" = "public"
                  fi

workflows:
  promises:
    jobs:
      - test-and-push:
          context:
            - github-credentials
          matrix:
            parameters:
              promise_dir: []
